{"version":3,"file":"static/js/481.666b0052.chunk.js","mappings":"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","sources":["Thread.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["\r\n/* eslint-disable no-restricted-globals */\r\nimport { FindProblem, TProblem } from \"./App\";\r\nimport { actions } from \"./enums\";\r\n\r\nconst { Chess } = require(\"chess.js\");\r\n\r\nconst Board = [\r\n    ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8'],\r\n    ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7'],\r\n    ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6'],\r\n    ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5'],\r\n    ['a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4'],\r\n    ['a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3'],\r\n    ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2'],\r\n    ['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1']\r\n]\r\n\r\nconst regexCheck = new RegExp('[#+]$');\r\nconst regexCheckmate = new RegExp('#$');\r\nconst rows: Record<string, string> = {\r\n    '1': '45678',\r\n    '2': '5678',\r\n    '3': '678',\r\n    '4': '78',\r\n    '5': '8'\r\n}\r\n\r\nconst cols: Record<string, string> = {\r\n    'a': 'defgh',\r\n    'b': 'efgh',\r\n    'c': 'fgh',\r\n    'd': 'gh',\r\n    'e': 'h'\r\n}\r\n\r\nconst position: string[] = [];\r\n\r\nself.onmessage = (e: MessageEvent<string>) => {\r\n    const findProblem = JSON.parse(e.data) as FindProblem;\r\n    const { pieces, fromSquare, nSquares, testFen } = findProblem;\r\n\r\n    const chessPosition = testFen ? new Chess(testFen) : new Chess();\r\n    if (!testFen)\r\n        chessPosition.clear();\r\n\r\n    // patterns\r\n    let nPatterns = 0\r\n    const applyQueenNightFirewall = pieces.includes('Q') && pieces.includes('N');\r\n    if (applyQueenNightFirewall)\r\n        nPatterns++;\r\n\r\n    let ind = 0;\r\n    let j = 0;\r\n    //const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n    for (; j < Board.length; j++) {\r\n        ind = Board[j].indexOf(fromSquare);\r\n        if (ind !== -1) {\r\n            break;\r\n        }\r\n    }\r\n    const ind2 = ind + nSquares;\r\n    const board: string[] = [];\r\n    for (let i = 0; i < nSquares - j; i++) {\r\n        board.push(...Board[j + i].slice(ind, ind2));\r\n    }\r\n\r\n    // inside of white or black pieces\r\n    const twoEmptyLines = (pieces: string[]): boolean => { // ['b1', 'd4', 'e4', 'h5']\r\n        const a = pieces.map(square => square.charAt(1)).sort();\r\n        for (let i = 0; i < a.length - 1; i++) {\r\n            if (!['6', '7', '8'].includes(a[i])) {\r\n                if (rows[a[i]].includes(a[i + 1]))\r\n                    return true;\r\n            }\r\n        }\r\n        const b = pieces.map(square => square.charAt(0)).sort();\r\n        for (let i = 0; i < b.length - 1; i++) {\r\n            if (!['f', 'g', 'h'].includes(b[i])) {\r\n                if (cols[b[i]].includes(b[i + 1]))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const columns = \"abcdefgh\";\r\n\r\n    // between white pieces and black king\r\n    const twoEmptyLinesWhitesBlacks = (whitePieces: string[], blackPieces: string[]): boolean => {\r\n        const whiteMaxI = Math.max(...whitePieces.map(square => parseInt(square.charAt(1))));\r\n        const blackMinI = Math.min(...blackPieces.map(square => parseInt(square.charAt(1))));\r\n        if (Math.abs(whiteMaxI - blackMinI) > 1)\r\n            return true;\r\n        const whiteMaxJ = Math.max(...whitePieces.map(square => columns.indexOf(square.charAt(0))));\r\n        const blackMinJ = Math.min(...blackPieces.map(square => columns.indexOf(square.charAt(0))));\r\n        if (Math.abs(whiteMaxJ - blackMinJ) > 1)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    const isPattern = (board: [({ type: string, color: string, square: string }|null)[]]): boolean => {\r\n        // 1.Pattern: Queen Night firewall\r\n        if (applyQueenNightFirewall) {\r\n            let squareQ = null;\r\n            let squareN = null;\r\n            for (let i = 0; i < 8 && (!squareQ || !squareN); i++) {\r\n                const row = board[i];\r\n                for (let j = 0; j < 8 && (!squareQ || !squareN); j++) {\r\n                    if (row[j]) {\r\n                        const { type, color, square } = row[j]!;\r\n                        if (type === 'q' && color === 'w') {\r\n                            squareQ = square;\r\n                        }\r\n                        else if (type === 'n' && color === 'w') {\r\n                            squareN = square;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!squareN || !squareQ) {\r\n                return false; // may Q or N has been taken in the black move\r\n            }\r\n            const jQ = parseInt(squareQ!.charAt(1));\r\n            const iQ = columns.indexOf(squareQ!.charAt(0));\r\n            const jN = parseInt(squareN!.charAt(1));\r\n            const iN = columns.indexOf(squareN!.charAt(0));\r\n            return (iQ === iN && Math.abs(jQ - jN) === 2) || (jQ === jN && Math.abs(iQ - iN) === 2)\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const checkmateIn2 = (): string | null => {\r\n        const whiteMoves1 = chessPosition.moves().filter((m: string) => !regexCheck.test(m) && !m.includes('x'));\r\n        let nMates1 = 0;\r\n        let firstMove: string | null = null;\r\n        let oneOfTheCheckmatesIsPattern = false;\r\n        for (const white1 of whiteMoves1) {\r\n            // white1 \r\n            chessPosition.move(white1);\r\n            // black 1\r\n            const blackMoves = chessPosition.moves();\r\n            let nMates2 = 0;\r\n            oneOfTheCheckmatesIsPattern = false;\r\n            for (const black of blackMoves) {\r\n                chessPosition.move(black);\r\n                // white 2\r\n                const white2Moves = chessPosition.moves();\r\n                const whiteMates = white2Moves.filter((m: string) => regexCheckmate.test(m));\r\n                nMates2 = whiteMates.length;\r\n                if (nMates2 > 0 && nPatterns > 0) {\r\n                    for (const white2 of whiteMates) {\r\n                        chessPosition.move(white2);\r\n                        // is there any of checkmates a pattern?\r\n                        if (isPattern(chessPosition.board())) {\r\n                            oneOfTheCheckmatesIsPattern = true;\r\n                            console.log('black:', black, ' white2:', white2)\r\n                        }\r\n                        chessPosition.undo();\r\n                        if (oneOfTheCheckmatesIsPattern)\r\n                            break;\r\n                    }\r\n                }\r\n                chessPosition.undo();\r\n                if (nMates2 === 0)\r\n                    break; // second move is not checkmate or there are more than 1 checkmate\r\n            }\r\n            if (nMates2 > 0 && (nPatterns === 0 || oneOfTheCheckmatesIsPattern)) {\r\n                if (testFen)\r\n                    console.log('checkmate at second move', white1)\r\n                nMates1++;\r\n                firstMove = white1;\r\n                console.log('firstMove:', firstMove)\r\n            }\r\n            chessPosition.undo();\r\n        }\r\n        if (testFen)\r\n            console.log(nMates1 === 1 ? 'Position is problem' : 'Position is not problem')\r\n        return nMates1 === 1 ? firstMove : null;\r\n    }\r\n\r\n    const blackKingIndex = findProblem.pieces.indexOf('k');\r\n    let lastCheckmate: string | null = null;\r\n\r\n    function getPosition(pieces: string[], index: number): void {\r\n        const piece = pieces.shift();\r\n        const c = piece!.charAt(0);\r\n        const type = c.toLowerCase();\r\n        const color = /[RNBKQP]/.test(c) ? 'w' : 'b';\r\n        const blackKing = c === 'k';\r\n        // console.log(piece)\r\n        for (const square of board) {\r\n            if (!position.includes(square) && !((type === 'p' && (square.includes('8') || square.includes('1'))))) {\r\n                const piecePlaced = chessPosition.put({ type, color }, square);\r\n                const invalidPos = chessPosition.isCheck() ||\r\n                    (blackKing &&\r\n                        (chessPosition.isAttacked(square, 'w') ||\r\n                            square.endsWith('1') || square.endsWith('8') ||\r\n                            square.startsWith('a') || square.startsWith('h'))) ||\r\n                    (color === 'b' && chessPosition.isAttacked(position[0], 'b')); // white 'K' is at position[0]\r\n                if (invalidPos) {\r\n                    const z = chessPosition.remove(square);\r\n                }\r\n                else {\r\n                    if (piecePlaced) {\r\n                        let whiteEmptyLines = false;\r\n                        let blackEmptyLines = false;\r\n                        let whiteHasCheck = false;\r\n                        if (blackKing) {\r\n                            lastCheckmate = null;\r\n                        }\r\n                        position.push(square);\r\n                        //if (color === 'w' && position.length > 1) {\r\n                        if (index > 0 && index < blackKingIndex) {\r\n                            const whitePieces = position.slice(0, position.length); // TODO keep blackPieces at recursion level\r\n                            whiteEmptyLines = twoEmptyLines(whitePieces);\r\n                        }\r\n                        else if (index >= blackKingIndex) {\r\n                            const blackPieces = position.slice(blackKingIndex, position.length); // TODO keep blackPieces at recursion level\r\n                            if (blackPieces.length > 1) {\r\n                                blackEmptyLines = twoEmptyLines(blackPieces);\r\n                            }\r\n                            if (!blackEmptyLines) {\r\n                                const whitePieces = position.slice(0, blackKingIndex);\r\n                                blackEmptyLines = twoEmptyLinesWhitesBlacks(whitePieces, blackPieces);\r\n                            }\r\n                            if (index === blackKingIndex) {\r\n                                // ignore if white has no check at the first move\r\n                                whiteHasCheck = chessPosition.isAttacked(square, 'w')\r\n                            }\r\n                        }\r\n                        if (!whiteEmptyLines && !blackEmptyLines && !whiteHasCheck) {\r\n                            if (pieces.length === 0) {\r\n                                const fen = chessPosition.fen()\r\n                                let firstMove = checkmateIn2();\r\n                                const isCheckmate = firstMove !== null;\r\n                                if (isCheckmate) {\r\n                                    if (firstMove === lastCheckmate) {\r\n                                        firstMove = null;\r\n                                    }\r\n                                    else {\r\n                                        lastCheckmate = firstMove;\r\n                                        console.log('------', position, '---', fen);\r\n                                    }\r\n                                }\r\n                                const response = { fen, firstMove } as TProblem;\r\n                                self.postMessage(JSON.stringify(response));\r\n                                //if (isCheckmate) {\r\n                                // if white move (Qf7) is checkmate, \r\n                                // then ignore every problem, after all black pieces moves (except king), \r\n                                // that produces checkmate (Qf7)\r\n                                //}\r\n                            }\r\n                            else {\r\n                                getPosition([...pieces], index + 1);\r\n                            }\r\n                        }\r\n                        position.pop();\r\n                        const z = chessPosition.remove(square);\r\n                        // const fen2 = chessPosition.fen();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (fromSquare === \"\") {\r\n        console.log('Invalid fromSquare')\r\n    }\r\n    else if (testFen) {\r\n        console.time()\r\n        const firstMove = checkmateIn2();\r\n        const response = {\r\n            fen: testFen,\r\n            firstMove\r\n        } as TProblem;\r\n        self.postMessage(JSON.stringify(response));\r\n        console.timeEnd()\r\n    }\r\n    else {\r\n        getPosition([...findProblem.pieces], 0);\r\n    }\r\n};\r\n\r\nexport { };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [777], function() { return __webpack_require__(481); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"0e9f84b3\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/chess-problem/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t481: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkchess_game\"] = self[\"webpackChunkchess_game\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(777).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["Chess","require","Board","regexCheck","RegExp","regexCheckmate","rows","cols","position","self","onmessage","e","findProblem","JSON","parse","data","pieces","fromSquare","nSquares","testFen","chessPosition","clear","nPatterns","applyQueenNightFirewall","includes","ind","j","length","indexOf","ind2","board","i","push","apply","_toConsumableArray","slice","twoEmptyLines","a","map","square","charAt","sort","b","columns","twoEmptyLinesWhitesBlacks","whitePieces","blackPieces","whiteMaxI","Math","max","parseInt","blackMinI","min","abs","whiteMaxJ","blackMinJ","isPattern","squareQ","squareN","row","_ref","type","color","jQ","iQ","jN","iN","checkmateIn2","_step","whiteMoves1","moves","filter","m","test","nMates1","firstMove","oneOfTheCheckmatesIsPattern","_iterator","_createForOfIteratorHelper","s","n","done","white1","value","move","blackMoves","nMates2","_step2","_iterator2","black","whiteMates","_step3","_iterator3","white2","console","log","undo","err","f","blackKingIndex","lastCheckmate","time","response","fen","postMessage","stringify","timeEnd","getPosition","index","_step4","c","shift","toLowerCase","blackKing","_iterator4","piecePlaced","put","isCheck","isAttacked","endsWith","startsWith","remove","whiteEmptyLines","blackEmptyLines","whiteHasCheck","pop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","x","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","next","then"],"sourceRoot":""}