{"version":3,"file":"static/js/505.5cd1728d.chunk.js","mappings":"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","sources":["helpers.ts","Thread.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export const Board = [\r\n    ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8'],\r\n    ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7'],\r\n    ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6'],\r\n    ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5'],\r\n    ['a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4'],\r\n    ['a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3'],\r\n    ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2'],\r\n    ['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1']\r\n]\r\n\r\nexport const columns = \"abcdefgh\";\r\n\r\nexport const emptyLines = (pieces: { i: number, j: number }[]): boolean => {\r\n    let a = pieces.map(square => square.i).sort();\r\n    for (let x = 0; x < a.length - 1; x++) {\r\n        if (a[x + 1] - a[x] > 3) {   // a2-a7 means 3 empty lines\r\n            return true;\r\n        }\r\n    }\r\n    a = pieces.map(square => square.j).sort();\r\n    for (let x = 0; x < a.length - 1; x++) {\r\n        if (a[x + 1] - a[x] > 3) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nlet iMinW = 9; let iMaxW = -1;\r\nlet jMinW = 9; let jMaxW = -1;\r\nexport const calcWhitePiecesSquare = (whitePieces: { i: number, j: number }[]): void => {\r\n    iMinW = 9; iMaxW = -1;\r\n    jMinW = 9; jMaxW = -1;\r\n    for (let square of whitePieces) {\r\n        const { i, j } = square;\r\n        if (i < iMinW) iMinW = i;\r\n        if (i > iMaxW) iMaxW = i;\r\n        if (j < jMinW) jMinW = j;\r\n        if (j > jMaxW) jMaxW = j;\r\n    }\r\n}\r\n\r\nexport const anyWhitePieceInsideOfBlackPiecesSquare = (blackPieces: { i: number, j: number }[]): boolean => {\r\n    for (const square of blackPieces) {\r\n        const { i, j } = square;\r\n        if (i >= iMinW && i <= iMaxW && j >= jMinW && j <= jMaxW) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n// between white pieces and black king\r\nexport const twoEmptyLinesWhitesBlacks = (\r\n    whitePieces: { i: number, j: number }[],\r\n    blackPieces: { i: number, j: number }[]) : boolean => {\r\n    const whiteMaxI = Math.max(...whitePieces.map(square => square.i));\r\n    const blackMinI = Math.min(...blackPieces.map(square => square.i));\r\n    if (Math.abs(whiteMaxI - blackMinI) > 1)\r\n        return true;\r\n    const whiteMaxJ = Math.max(...whitePieces.map(square => square.j));\r\n    const blackMinJ = Math.min(...blackPieces.map(square => square.j));\r\n    if (Math.abs(whiteMaxJ - blackMinJ) > 1)\r\n        return true;\r\n    return false;\r\n}\r\n\r\nconst diagonal1: string[][] = [\r\n    ['a1', 'b2', 'c3', 'd4', 'e5', 'f6', 'g7', 'h8'],\r\n    ['a2', 'b3', 'c4', 'd5', 'e6', 'f7', 'g8'],\r\n    ['a3', 'b4', 'c5', 'd6', 'e7', 'f8'],\r\n    ['a4', 'b5', 'c6', 'd7', 'e8'],\r\n    ['a5', 'b6', 'c7', 'd8'],\r\n    ['a6', 'b7', 'c8'],\r\n    ['a7', 'b8'],\r\n    ['b1', 'c2', 'd3', 'e4', 'f5', 'g6', 'h7'],\r\n    ['c1', 'd2', 'e3', 'f4', 'g5', 'h6'],\r\n    ['d1', 'e2', 'f3', 'g4', 'h5'],\r\n    ['e1', 'f2', 'g3', 'h4'],\r\n    ['f1', 'g2', 'h3'],\r\n    ['g1', 'h2']\r\n]\r\n\r\nconst diagonal2: string[][] = [\r\n    ['h1', 'g2', 'f3', 'e4', 'd5', 'c6', 'b7', 'a8'],\r\n    ['h2', 'g3', 'f4', 'e5', 'd6', 'c7', 'b8'],\r\n    ['h3', 'g4', 'f5', 'e6', 'd7', 'c8'],\r\n    ['h4', 'g5', 'f6', 'e7', 'd8'],\r\n    ['h5', 'g6', 'f7', 'e8'],\r\n    ['h6', 'g7', 'f8'],\r\n    ['h7', 'g8'],\r\n    ['g1', 'f2', 'e3', 'd4', 'c5', 'b6', 'a7'],\r\n    ['f1', 'e2', 'd3', 'c4', 'b5', 'a6'],\r\n    ['e1', 'd2', 'c3', 'b4', 'a5'],\r\n    ['d1', 'c2', 'b3', 'a4'],\r\n    ['c1', 'b2', 'a3'],\r\n    ['b1', 'a2']\r\n]\r\n\r\nconst diagonal: Record<string, string[]> = {};\r\nfor (const row of ['1', '2', '3', '4', '5', '6', '7', '8']) {\r\n    for (const col of ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) {\r\n        const square = col + row;\r\n        diagonal[square] = [];\r\n        for (const line of diagonal1) {\r\n            if (line.includes(square))\r\n                diagonal[square].push(...line.filter(x => x !== square))\r\n        }\r\n        for (const line of diagonal2) {\r\n            if (line.includes(square))\r\n                diagonal[square].push(...line.filter(x => x !== square))\r\n        }\r\n    }\r\n}\r\nexport const isOnDiagonal = (square1: string, square2: string): boolean => diagonal[square1].includes(square2);\r\n\r\nexport const applyNightFirewall = (board: [({ type: string, color: string, square: string } | null)[]], queenOrBishop: string): boolean => {\r\n    // 1.Pattern: Queen Night firewall\r\n    let squareQ = null;\r\n    let squareN = null;\r\n    for (let i = 0; i < 8 && (!squareQ || !squareN); i++) {\r\n        const row = board[i];\r\n        for (let j = 0; j < 8 && (!squareQ || !squareN); j++) {\r\n            if (row[j]) {\r\n                const { type, color, square } = row[j]!;\r\n                if (type === queenOrBishop && color === 'w') {\r\n                    squareQ = square;\r\n                }\r\n                else if (type === 'n' && color === 'w') {\r\n                    squareN = square;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (!squareN || !squareQ) {\r\n        return false; // may Q or N has been taken in the black move\r\n    }\r\n    const jQ = parseInt(squareQ!.charAt(1));\r\n    const iQ = columns.indexOf(squareQ!.charAt(0));\r\n    const jN = parseInt(squareN!.charAt(1));\r\n    const iN = columns.indexOf(squareN!.charAt(0));\r\n    let bRet = (iQ === iN && (Math.abs(jQ - jN) === 2 || Math.abs(jQ - jN) === 4)) ||\r\n        (jQ === jN && (Math.abs(iQ - iN) === 2 || Math.abs(iQ - iN) === 4));\r\n    if (!bRet) {\r\n        bRet = isOnDiagonal(squareQ, squareN);\r\n    }\r\n    return bRet;\r\n}\r\n\r\nexport const markWhiteSquareBishops = (\r\n    pieces: string[],\r\n    board: [({ type: string, color: string, square: string } | null)[]],\r\n    squareColor: (square: string) => string\r\n) => {\r\n    const whiteSquareBishops: boolean[] = [];\r\n\r\n    const taken: boolean[][] = [];\r\n    for (let i = 0; i < 8; i++) {\r\n        taken[i] = [];\r\n        for (let j = 0; j < 8; j++)\r\n            taken[i][j] = false;\r\n    }\r\n\r\n    for (const piece of pieces) {\r\n        const pieceColor = ['K', 'Q', 'R', 'B', 'N', 'P'].includes(piece) ? 'w' : 'b';\r\n        const pieceType = piece.toLowerCase();\r\n        let found = false;\r\n        for (let i = 0; i < 8 && !found; i++) {\r\n            const row = board[i];\r\n            for (let j = 0; j < 8 && !found; j++) {\r\n                const p = row[j];\r\n                if (p) {\r\n                    const { type, color, square } = p!;\r\n                    if (type === pieceType && color === pieceColor) {\r\n                        const isWhiteSquare = type === 'b' && !taken[i][j] && squareColor(square) === 'light';\r\n                        taken[i][j] = true;\r\n                        whiteSquareBishops.push(isWhiteSquare);\r\n                        found = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return whiteSquareBishops;\r\n}\r\n\r\nconst arroundWhiteKing: Record<string, string[]> = {};\r\n\r\nconst arrounds = (i: number, j: number): string[] => {\r\n    let arr: string[] = []\r\n    for (let r=i-1; r <= i+1; r++) {\r\n        if (r<1 || r>8) continue;\r\n        for (let c=j-1; c <= j+1; c++) {\r\n            if (c<0 || r>7 || (r===i && c===j)) continue;\r\n            arr.push(columns[c] + r);\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nfor (let i=1; i <= 8; i++) {\r\n    for (let j=0; j < 8; j++) {\r\n        arroundWhiteKing[columns[j] + i] = arrounds(i, j);\r\n    }\r\n}\r\n\r\nexport const touchingWhiteKing = (whiteKingSquare: string, blackPieceSquare: string): boolean => {\r\n    return arroundWhiteKing[whiteKingSquare].includes(blackPieceSquare);\r\n}\r\n\r\nexport { };\r\n","\r\n/* eslint-disable no-restricted-globals */\r\nimport { FindProblem, TProblem } from \"./App\";\r\nimport {\r\n    Board,\r\n    markWhiteSquareBishops,\r\n    calcWhitePiecesSquare,\r\n    anyWhitePieceInsideOfBlackPiecesSquare,\r\n    emptyLines,\r\n    twoEmptyLinesWhitesBlacks,\r\n    applyNightFirewall,\r\n    columns,\r\n    touchingWhiteKing\r\n} from './helpers'\r\nconst { Chess } = require(\"chess.js\");\r\n\r\nconst regexCheck = new RegExp('[#+]$');\r\nconst regexCheckmate = new RegExp('#$');\r\n\r\nconst position: string[] = [];\r\n\r\nself.onmessage = (e: MessageEvent<string>) => {\r\n    const findProblem = JSON.parse(e.data) as FindProblem;\r\n    const { pieces, indexOfBlack, lookingForFen, fromSquare, toSquare, nSquares, testFen } = findProblem;\r\n    const whiteSquareBishops: boolean[] = [];\r\n\r\n    const chess = testFen ? new Chess(testFen) : new Chess(lookingForFen);\r\n    if (!testFen) {\r\n\r\n        const board = chess.board();\r\n        const whiteBishops = markWhiteSquareBishops(pieces, board, (square: string) => chess.squareColor(square));\r\n        whiteSquareBishops.push(...whiteBishops);\r\n\r\n        chess.clear();\r\n    }\r\n\r\n    // patterns\r\n    let nPatterns = 0\r\n    const applyQueenNightFirewall = pieces.includes('Q') && pieces.includes('N');\r\n    if (applyQueenNightFirewall)\r\n        nPatterns++;\r\n\r\n    const applyBishopNightFirewall = pieces.includes('B') && pieces.includes('N');\r\n    if (applyBishopNightFirewall)\r\n        nPatterns++;\r\n\r\n    /*\r\n    let ind = 0;\r\n    let j = 0;\r\n    //const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n    for (; j < Board.length; j++) {\r\n        ind = Board[j].indexOf(fromSquare);\r\n        if (ind !== -1) {\r\n            break;\r\n        }\r\n    }\r\n    const ind2 = ind + nSquares;\r\n    const board: string[] = [];\r\n    for (let i = 0; i < nSquares - j; i++) {\r\n        board.push(...Board[j + i].slice(ind, ind2));\r\n    }\r\n    */\r\n    const board: string[] = [];\r\n    for (const row of Board) {\r\n        board.push(...row);\r\n    }\r\n\r\n    const kingBoard: string[] = [];\r\n    let radi = false;\r\n    for (const square of board) {\r\n        if (square === fromSquare) {\r\n            radi = true;\r\n        }\r\n        else if (square === toSquare) {\r\n            kingBoard.push(square);\r\n            radi = false;\r\n        }\r\n        if (radi)\r\n            kingBoard.push(square);\r\n    }\r\n\r\n\r\n    const isPattern = (board: [({ type: string, color: string, square: string } | null)[]]): boolean => {\r\n        // 1. Pattern: Queen Night firewall\r\n        if (applyQueenNightFirewall) {\r\n            if (applyNightFirewall(board, 'q'))\r\n                return true;\r\n        }\r\n        // 2. Pattern: Bishop Night firewall\r\n        if (applyBishopNightFirewall) {\r\n            if (applyNightFirewall(board, 'b'))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // const blackKingIndex = findProblem.pieces.indexOf('k');\r\n\r\n    const checkmateIn2 = (): string | null => {\r\n        const whiteMoves1 = chess.moves();\r\n        // white first move must not be the check or checkmate or eat the black piece\r\n        const moves1 = whiteMoves1.filter((m: string) => !regexCheck.test(m) && !m.includes('x'));\r\n        let nMates1 = 0;\r\n        let firstMove: string | null = null;\r\n        let oneOfTheCheckmatesIsPattern = false;\r\n        // one of the moves should be check\r\n        for (const white1 of moves1) {\r\n            // white1 \r\n            chess.move(white1);\r\n            // black 1\r\n            const blackMoves = chess.moves();\r\n            let nMates2 = 0;\r\n            oneOfTheCheckmatesIsPattern = false;\r\n            for (const black of blackMoves) {\r\n                chess.move(black);\r\n                // white 2\r\n                const white2Moves = chess.moves();\r\n                const whiteMates = white2Moves.filter((m: string) => regexCheckmate.test(m) &&\r\n                    !(m.includes('=Q') || m.includes('=R')));\r\n                nMates2 = whiteMates.length;\r\n                if (nMates2 > 0 && nPatterns > 0) {\r\n                    for (const white2 of whiteMates) {\r\n                        chess.move(white2);\r\n                        // is there any of checkmates a pattern?\r\n                        if (isPattern(chess.board())) {\r\n                            oneOfTheCheckmatesIsPattern = true;\r\n                            console.log('black:', black, ' white2:', white2)\r\n                        }\r\n                        chess.undo();\r\n                        if (oneOfTheCheckmatesIsPattern)\r\n                            break;\r\n                    }\r\n                }\r\n                chess.undo();\r\n                if (nMates2 === 0)\r\n                    break; // second move is not checkmate or there are more than 1 checkmate\r\n            }\r\n            if (nMates2 > 0 && (nPatterns === 0 || oneOfTheCheckmatesIsPattern)) {\r\n                if (testFen)\r\n                    console.log('checkmate at second move', white1)\r\n                nMates1++;\r\n                firstMove = white1;\r\n                console.log('firstMove:', firstMove)\r\n            }\r\n            chess.undo();\r\n        }\r\n        if (testFen)\r\n            console.log(nMates1 === 1 ? 'Position is problem' : 'Position is not problem')\r\n        return nMates1 === 1 ? firstMove : null;\r\n    }\r\n\r\n    const whitePieces: { i: number, j: number }[] = [];\r\n    const blackPieces: { i: number, j: number }[] = [];\r\n\r\n    let lastCheckmate: string | null = null;\r\n\r\n    function getPosition(pieces: string[], index: number): void {\r\n        const piece = pieces.shift();\r\n        const c = piece!.charAt(0);\r\n        const type = c.toLowerCase();\r\n        const pieceColor = /[RNBKQP]/.test(c) ? 'w' : 'b';\r\n        const isBlack = index >= indexOfBlack; // pieceColor === 'b';\r\n        const whiteKing = c === 'K';\r\n        const blackKing = c === 'k';\r\n        const isBishop = type === 'b';\r\n        const whiteSquareBishop = isBishop && whiteSquareBishops[index];\r\n        // console.log(piece)\r\n        const boardMy = whiteKing ? kingBoard : board;\r\n        for (const square of boardMy) {\r\n            if (!position.includes(square) && !((type === 'p' && (square.includes('8') || square.includes('1'))))) {\r\n                const piecePlaced = chess.put({ type, color: pieceColor }, square);\r\n                // white 'K' is at position[0]\r\n                let invalidPos = false;\r\n                if ((isBishop && ((whiteSquareBishop && chess.squareColor(square) === 'dark') ||\r\n                    (!whiteSquareBishop && chess.squareColor(square) === 'light')))\r\n                ) {\r\n                    invalidPos = true;\r\n                }\r\n                if (!invalidPos && isBlack) {\r\n                    console.assert(pieceColor === 'b', 'Should be black piece')\r\n                    if (blackKing) {\r\n                        if (touchingWhiteKing(position[0], square)) {\r\n                            invalidPos = true;\r\n                        }\r\n                        else {\r\n                            if (chess.isAttacked(square, 'w'))\r\n                                invalidPos = true;\r\n                        }\r\n                    }\r\n                    else if (chess.isCheck()) {\r\n                        invalidPos = true;\r\n                        if (['q', 'r', 'b'].includes(type) && !touchingWhiteKing(position[0], square)) {\r\n                            invalidPos = false;\r\n                        }\r\n                    }\r\n                }\r\n                /*invalidPos = chess.isCheck() ||\r\n                    (blackKing &&\r\n                        (chess.isAttacked(square, 'w') ||\r\n                            // square.endsWith('1') || square.endsWith('8') ||\r\n                            // square.startsWith('a') || square.startsWith('h') ||\r\n                            (pieceColor === 'b' && chess.isAttacked(position[0], 'b')))\r\n                    ) ||\r\n                    (isBishop &&\r\n                        ((whiteSquareBishop && chess.squareColor(square) === 'dark') ||\r\n                        (!whiteSquareBishop && chess.squareColor(square) === 'light'))\r\n                    );\r\n                */\r\n                if (invalidPos) {\r\n                    const z = chess.remove(square);\r\n                }\r\n                else {\r\n                    if (piecePlaced) {\r\n                        let whiteEmptyLines = false;\r\n                        let blackEmptyLines = false;\r\n                        //let whiteHasCheck = false;\r\n                        if (blackKing) {\r\n                            lastCheckmate = null;\r\n                            calcWhitePiecesSquare(whitePieces);\r\n                        }\r\n                        position.push(square);\r\n                        if (isBlack) {\r\n                            blackPieces.push({ i: parseInt(square.charAt(1)), j: columns.indexOf(square.charAt(0)) })\r\n                        }\r\n                        else {\r\n                            whitePieces.push({ i: parseInt(square.charAt(1)), j: columns.indexOf(square.charAt(0)) })\r\n                        }\r\n\r\n                        //if (color === 'w' && position.length > 1) {\r\n                        //if (index > 0 && index < indexOfBlack) {\r\n                        if (index === indexOfBlack) {\r\n                            // after all the white pieces have been placed\r\n                            whiteEmptyLines = emptyLines(whitePieces);\r\n                        }\r\n                        if (!whiteEmptyLines) {\r\n                            // else if (index >= indexOfBlack) {\r\n                            // else if (blackKing) {\r\n                            //     if (blackPieces.length > 1) {\r\n                            //         // after all the white pieces have been placed\r\n                            //         blackEmptyLines = emptyLines(blackPieces);\r\n                            //     }\r\n                            //     //if (!blackEmptyLines) { // TODO bellow we ask for intersection of white and black pieces\r\n                            //     //    blackEmptyLines = twoEmptyLinesWhitesBlacks(whitePieces, blackPieces);\r\n                            //     //}\r\n                            //     // if (blackKing) {\r\n                            //     //     // TODO Implement this after the move: ignore if white has no check at the first move\r\n                            //     //     whiteHasCheck = chess.isAttacked(square, 'w')\r\n                            //     // }\r\n                            // }\r\n                            //if (!whiteEmptyLines && !blackEmptyLines) { //} && !whiteHasCheck) {\r\n                            // do the job after all the pieces are placed\r\n                            if (pieces.length === 0) {\r\n                                blackEmptyLines = emptyLines(blackPieces);\r\n                                if (!blackEmptyLines) {\r\n                                    const intersection = anyWhitePieceInsideOfBlackPiecesSquare(blackPieces);\r\n                                    if (intersection) {\r\n                                        const fen = chess.fen();\r\n                                        let firstMove = checkmateIn2();\r\n                                        const isCheckmate = firstMove !== null;\r\n                                        if (isCheckmate) {\r\n                                            if (firstMove === lastCheckmate ||\r\n                                                firstMove!.endsWith('=Q') || firstMove!.endsWith('=R')) {\r\n                                                firstMove = null;\r\n                                            }\r\n                                            else {\r\n                                                lastCheckmate = firstMove;\r\n                                                console.log('------', position, '---', fen);\r\n                                            }\r\n                                        }\r\n                                        const response = { fen, firstMove } as TProblem;\r\n                                        self.postMessage(JSON.stringify(response));\r\n                                        //if (isCheckmate) {\r\n                                        // if white move (Qf7) is checkmate, \r\n                                        // then ignore every problem, after all black pieces moves (except king), \r\n                                        // that produces checkmate (Qf7)\r\n                                        //}\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                getPosition([...pieces], index + 1);\r\n                            }\r\n                        }\r\n                        position.pop();\r\n                        if (isBlack) {\r\n                            blackPieces.pop()\r\n                        }\r\n                        else {\r\n                            whitePieces.pop()\r\n                        }\r\n                        const z = chess.remove(square);\r\n                        // const fen2 = chessPosition.fen();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (fromSquare === \"\") {\r\n        console.log('Invalid fromSquare')\r\n    }\r\n    else if (testFen) {\r\n        console.time()\r\n        const firstMove = checkmateIn2();\r\n        const response = {\r\n            fen: testFen,\r\n            firstMove\r\n        } as TProblem;\r\n        self.postMessage(JSON.stringify(response));\r\n        console.timeEnd()\r\n    }\r\n    else {\r\n        getPosition([...findProblem.pieces], 0);\r\n    }\r\n};\r\n\r\nexport { };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [777], function() { return __webpack_require__(505); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"0e9f84b3\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/chess-problem/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t505: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkchess_game\"] = self[\"webpackChunkchess_game\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(777).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["Board","columns","emptyLines","pieces","a","map","square","i","sort","x","length","j","iMinW","iMaxW","jMinW","jMaxW","calcWhitePiecesSquare","whitePieces","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","err","e","f","anyWhitePieceInsideOfBlackPiecesSquare","blackPieces","_step2","_iterator2","diagonal1","diagonal2","diagonal","_i","_arr","row","_loop","_arr2","_i2","_step3","_iterator3","_diagonal$square","line","includes","push","apply","_toConsumableArray","filter","_step4","_iterator4","_diagonal$square2","applyNightFirewall","board","queenOrBishop","squareQ","squareN","_ref","type","color","square2","jQ","parseInt","charAt","iQ","indexOf","jN","iN","bRet","Math","abs","arroundWhiteKing","arrounds","arr","r","c","touchingWhiteKing","whiteKingSquare","blackPieceSquare","Chess","require","regexCheck","RegExp","regexCheckmate","position","self","onmessage","findProblem","JSON","parse","data","indexOfBlack","lookingForFen","fromSquare","toSquare","testFen","nSquares","whiteSquareBishops","chess","whiteBishops","squareColor","taken","_step5","_iterator5","piece","pieceColor","pieceType","toLowerCase","found","p","_ref2","isWhiteSquare","markWhiteSquareBishops","clear","nPatterns","applyQueenNightFirewall","applyBishopNightFirewall","kingBoard","radi","_board2","isPattern","checkmateIn2","moves1","moves","m","test","nMates1","firstMove","oneOfTheCheckmatesIsPattern","white1","move","blackMoves","nMates2","black","whiteMates","white2","console","log","undo","lastCheckmate","time","response","fen","postMessage","stringify","timeEnd","getPosition","index","shift","isBlack","whiteKing","blackKing","isBishop","whiteSquareBishop","boardMy","piecePlaced","put","invalidPos","assert","isAttacked","isCheck","remove","whiteEmptyLines","endsWith","pop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","key","splice","d","definition","o","defineProperty","enumerable","get","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","next","then"],"sourceRoot":""}