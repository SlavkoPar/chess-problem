{"version":3,"file":"static/js/481.7d90d494.chunk.js","mappings":"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","sources":["Thread.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["\r\n/* eslint-disable no-restricted-globals */\r\nimport { FindProblem, TProblem } from \"./App\";\r\nimport { actions } from \"./enums\";\r\n\r\nconst { Chess } = require(\"chess.js\");\r\n\r\nconst Board = [\r\n    ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8'],\r\n    ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7'],\r\n    ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6'],\r\n    ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5'],\r\n    ['a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4'],\r\n    ['a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3'],\r\n    ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2'],\r\n    ['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1']\r\n]\r\n\r\nconst regexCheck = new RegExp('[#+]$');\r\nconst regexCheckmate = new RegExp('#$');\r\nconst rows: Record<string, string> = {\r\n    '1': '45678',\r\n    '2': '5678',\r\n    '3': '678',\r\n    '4': '78',\r\n    '5': '8'\r\n}\r\n\r\nconst cols: Record<string, string> = {\r\n    'a': 'defgh',\r\n    'b': 'efgh',\r\n    'c': 'fgh',\r\n    'd': 'gh',\r\n    'e': 'h'\r\n}\r\n\r\nconst position: string[] = [];\r\n\r\nself.onmessage = (e: MessageEvent<string>) => {\r\n    const findProblem = JSON.parse(e.data) as FindProblem;\r\n    const { pieces, fromSquare, nSquares, testFen } = findProblem;\r\n\r\n    const chessPosition = testFen ? new Chess(testFen) : new Chess();\r\n    if (!testFen)\r\n        chessPosition.clear();\r\n\r\n    // patterns\r\n    let nPatterns = 0\r\n    const applyQueenNightFirewall = pieces.includes('Q') && pieces.includes('N');\r\n    if (applyQueenNightFirewall)\r\n        nPatterns++;\r\n\r\n    let ind = 0;\r\n    let j = 0;\r\n    //const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n    for (; j < Board.length; j++) {\r\n        ind = Board[j].indexOf(fromSquare);\r\n        if (ind !== -1) {\r\n            break;\r\n        }\r\n    }\r\n    const ind2 = ind + nSquares;\r\n    const board: string[] = [];\r\n    for (let i = 0; i < nSquares - j; i++) {\r\n        board.push(...Board[j + i].slice(ind, ind2));\r\n    }\r\n\r\n    // inside of white or black pieces\r\n    const twoEmptyLines = (pieces: string[]): boolean => { // ['b1', 'd4', 'e4', 'h5']\r\n        const a = pieces.map(square => square.charAt(1)).sort();\r\n        for (let i = 0; i < a.length - 1; i++) {\r\n            if (!['6', '7', '8'].includes(a[i])) {\r\n                if (rows[a[i]].includes(a[i + 1]))\r\n                    return true;\r\n            }\r\n        }\r\n        const b = pieces.map(square => square.charAt(0)).sort();\r\n        for (let i = 0; i < b.length - 1; i++) {\r\n            if (!['f', 'g', 'h'].includes(b[i])) {\r\n                if (cols[b[i]].includes(b[i + 1]))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const columns = \"abcdefgh\";\r\n\r\n    // between white pieces and black king\r\n    const twoEmptyLinesWhitesBlacks = (whitePieces: string[], blackPieces: string[]): boolean => {\r\n        const whiteMaxI = Math.max(...whitePieces.map(square => parseInt(square.charAt(1))));\r\n        const blackMinI = Math.min(...blackPieces.map(square => parseInt(square.charAt(1))));\r\n        if (Math.abs(whiteMaxI - blackMinI) > 1)\r\n            return true;\r\n        const whiteMaxJ = Math.max(...whitePieces.map(square => columns.indexOf(square.charAt(0))));\r\n        const blackMinJ = Math.min(...blackPieces.map(square => columns.indexOf(square.charAt(0))));\r\n        if (Math.abs(whiteMaxJ - blackMinJ) > 1)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    const diagonal1: string[][] = [\r\n        ['a1', 'b2', 'c3', 'd4', 'e5', 'f6', 'g7', 'h8'],\r\n        ['a2', 'b3', 'c4', 'd5', 'e6', 'f7', 'g8'],\r\n        ['a3', 'b4', 'c5', 'd6', 'e7', 'f8'],\r\n        ['a4', 'b5', 'c6', 'd7', 'e8'],\r\n        ['a5', 'b6', 'c7', 'd8'],\r\n        ['a6', 'b7', 'c8'],\r\n        ['a7', 'b8'],\r\n        ['b1', 'c2', 'd3', 'e4', 'f5', 'g6', 'h7'],\r\n        ['c1', 'd2', 'e3', 'f4', 'g5', 'h6'],\r\n        ['d1', 'e2', 'f3', 'g4', 'h5'],\r\n        ['e1', 'f2', 'g3', 'h4'],\r\n        ['f1', 'g2', 'h3'],\r\n        ['g1', 'h2']\r\n    ]\r\n\r\n    const diagonal2: string[][] = [\r\n        ['h1', 'g2', 'f3', 'e4', 'd5', 'c6', 'b7', 'a8'],\r\n        ['h2', 'g3', 'f4', 'e5', 'd6', 'c7', 'b8'],\r\n        ['h3', 'g4', 'f5', 'e6', 'd7', 'c8'],\r\n        ['h4', 'g5', 'f6', 'e7', 'd8'],\r\n        ['h5', 'g6', 'f7', 'e8'],\r\n        ['h6', 'g7', 'f8'],\r\n        ['h7', 'g8'],\r\n        ['g1', 'f2', 'e3', 'd4', 'c5', 'b6', 'a7'],\r\n        ['f1', 'e2', 'd3', 'c4', 'b5', 'a6'],\r\n        ['e1', 'd2', 'c3', 'b4', 'a5'],\r\n        ['d1', 'c2', 'b3', 'a4'],\r\n        ['c1', 'b2', 'a3'],\r\n        ['b1', 'a2']\r\n    ]\r\n\r\n    const diagonal: Record<string, string[]> = {};\r\n    for(const row of ['1','2','3','4','5','6','7','8']) {\r\n        for(const col of ['a','b','c','d','e','f','g','h']) {\r\n            const square = col+row;\r\n            diagonal[square] = [];\r\n            for(const line of diagonal1) {\r\n                if (line.includes(square))\r\n                    diagonal[square].push(...line.filter(x => x!==square))\r\n            }\r\n            for(const line of diagonal2) {\r\n                if (line.includes(square))\r\n                    diagonal[square].push(...line.filter(x => x!==square))\r\n            }\r\n        }\r\n    }\r\n    const isOnDiagonal = (square1: string, square2: string): boolean => diagonal[square1].includes(square2);\r\n\r\n\r\n    const isPattern = (board: [({ type: string, color: string, square: string }|null)[]]): boolean => {\r\n        // 1.Pattern: Queen Night firewall\r\n        if (applyQueenNightFirewall) {\r\n            let squareQ = null;\r\n            let squareN = null;\r\n            for (let i = 0; i < 8 && (!squareQ || !squareN); i++) {\r\n                const row = board[i];\r\n                for (let j = 0; j < 8 && (!squareQ || !squareN); j++) {\r\n                    if (row[j]) {\r\n                        const { type, color, square } = row[j]!;\r\n                        if (type === 'q' && color === 'w') {\r\n                            squareQ = square;\r\n                        }\r\n                        else if (type === 'n' && color === 'w') {\r\n                            squareN = square;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!squareN || !squareQ) {\r\n                return false; // may Q or N has been taken in the black move\r\n            }\r\n            const jQ = parseInt(squareQ!.charAt(1));\r\n            const iQ = columns.indexOf(squareQ!.charAt(0));\r\n            const jN = parseInt(squareN!.charAt(1));\r\n            const iN = columns.indexOf(squareN!.charAt(0));\r\n            let bRet = (iQ === iN && (Math.abs(jQ - jN) === 2 || Math.abs(jQ - jN) === 4)) ||\r\n                         (jQ === jN && (Math.abs(iQ - iN) === 2 || Math.abs(iQ - iN) === 4));\r\n            if (!bRet) {\r\n                bRet = isOnDiagonal(squareQ, squareN);\r\n            }\r\n            return bRet;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const checkmateIn2 = (): string | null => {\r\n        const whiteMoves1 = chessPosition.moves().filter((m: string) => !regexCheck.test(m) && !m.includes('x'));\r\n        let nMates1 = 0;\r\n        let firstMove: string | null = null;\r\n        let oneOfTheCheckmatesIsPattern = false;\r\n        for (const white1 of whiteMoves1) {\r\n            // white1 \r\n            chessPosition.move(white1);\r\n            // black 1\r\n            const blackMoves = chessPosition.moves();\r\n            let nMates2 = 0;\r\n            oneOfTheCheckmatesIsPattern = false;\r\n            for (const black of blackMoves) {\r\n                chessPosition.move(black);\r\n                // white 2\r\n                const white2Moves = chessPosition.moves();\r\n                const whiteMates = white2Moves.filter((m: string) => regexCheckmate.test(m) && \r\n                         !(m.includes('=Q') || m.includes('=R')));\r\n                nMates2 = whiteMates.length;\r\n                if (nMates2 > 0 && nPatterns > 0) {\r\n                    for (const white2 of whiteMates) {\r\n                        chessPosition.move(white2);\r\n                        // is there any of checkmates a pattern?\r\n                        if (isPattern(chessPosition.board())) {\r\n                            oneOfTheCheckmatesIsPattern = true;\r\n                            console.log('black:', black, ' white2:', white2)\r\n                        }\r\n                        chessPosition.undo();\r\n                        if (oneOfTheCheckmatesIsPattern)\r\n                            break;\r\n                    }\r\n                }\r\n                chessPosition.undo();\r\n                if (nMates2 === 0)\r\n                    break; // second move is not checkmate or there are more than 1 checkmate\r\n            }\r\n            if (nMates2 > 0 && (nPatterns === 0 || oneOfTheCheckmatesIsPattern)) {\r\n                if (testFen)\r\n                    console.log('checkmate at second move', white1)\r\n                nMates1++;\r\n                firstMove = white1;\r\n                console.log('firstMove:', firstMove)\r\n            }\r\n            chessPosition.undo();\r\n        }\r\n        if (testFen)\r\n            console.log(nMates1 === 1 ? 'Position is problem' : 'Position is not problem')\r\n        return nMates1 === 1 ? firstMove : null;\r\n    }\r\n\r\n    const blackKingIndex = findProblem.pieces.indexOf('k');\r\n    let lastCheckmate: string | null = null;\r\n\r\n    function getPosition(pieces: string[], index: number): void {\r\n        const piece = pieces.shift();\r\n        const c = piece!.charAt(0);\r\n        const type = c.toLowerCase();\r\n        const color = /[RNBKQP]/.test(c) ? 'w' : 'b';\r\n        const blackKing = c === 'k';\r\n        // console.log(piece)\r\n        for (const square of board) {\r\n            if (!position.includes(square) && !((type === 'p' && (square.includes('8') || square.includes('1'))))) {\r\n                const piecePlaced = chessPosition.put({ type, color }, square);\r\n                const invalidPos = chessPosition.isCheck() ||\r\n                    (blackKing &&\r\n                        (chessPosition.isAttacked(square, 'w') ||\r\n                            square.endsWith('1') || square.endsWith('8') ||\r\n                            square.startsWith('a') || square.startsWith('h'))) ||\r\n                    (color === 'b' && chessPosition.isAttacked(position[0], 'b')); // white 'K' is at position[0]\r\n                if (invalidPos) {\r\n                    const z = chessPosition.remove(square);\r\n                }\r\n                else {\r\n                    if (piecePlaced) {\r\n                        let whiteEmptyLines = false;\r\n                        let blackEmptyLines = false;\r\n                        let whiteHasCheck = false;\r\n                        if (blackKing) {\r\n                            lastCheckmate = null;\r\n                        }\r\n                        position.push(square);\r\n                        //if (color === 'w' && position.length > 1) {\r\n                        if (index > 0 && index < blackKingIndex) {\r\n                            const whitePieces = position.slice(0, position.length); // TODO keep blackPieces at recursion level\r\n                            whiteEmptyLines = twoEmptyLines(whitePieces);\r\n                        }\r\n                        else if (index >= blackKingIndex) {\r\n                            const blackPieces = position.slice(blackKingIndex, position.length); // TODO keep blackPieces at recursion level\r\n                            if (blackPieces.length > 1) {\r\n                                blackEmptyLines = twoEmptyLines(blackPieces);\r\n                            }\r\n                            if (!blackEmptyLines) {\r\n                                const whitePieces = position.slice(0, blackKingIndex);\r\n                                blackEmptyLines = twoEmptyLinesWhitesBlacks(whitePieces, blackPieces);\r\n                            }\r\n                            if (index === blackKingIndex) {\r\n                                // ignore if white has no check at the first move\r\n                                whiteHasCheck = chessPosition.isAttacked(square, 'w')\r\n                            }\r\n                        }\r\n                        if (!whiteEmptyLines && !blackEmptyLines && !whiteHasCheck) {\r\n                            if (pieces.length === 0) {\r\n                                const fen = chessPosition.fen()\r\n                                let firstMove = checkmateIn2();\r\n                                const isCheckmate = firstMove !== null;\r\n                                if (isCheckmate) {\r\n                                    if (firstMove === lastCheckmate || \r\n                                        firstMove!.endsWith('=Q') || firstMove!.endsWith('=R')) {\r\n                                        firstMove = null;\r\n                                    }\r\n                                    else {\r\n                                        lastCheckmate = firstMove;\r\n                                        console.log('------', position, '---', fen);\r\n                                    }\r\n                                }\r\n                                const response = { fen, firstMove } as TProblem;\r\n                                self.postMessage(JSON.stringify(response));\r\n                                //if (isCheckmate) {\r\n                                // if white move (Qf7) is checkmate, \r\n                                // then ignore every problem, after all black pieces moves (except king), \r\n                                // that produces checkmate (Qf7)\r\n                                //}\r\n                            }\r\n                            else {\r\n                                getPosition([...pieces], index + 1);\r\n                            }\r\n                        }\r\n                        position.pop();\r\n                        const z = chessPosition.remove(square);\r\n                        // const fen2 = chessPosition.fen();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (fromSquare === \"\") {\r\n        console.log('Invalid fromSquare')\r\n    }\r\n    else if (testFen) {\r\n        console.time()\r\n        const firstMove = checkmateIn2();\r\n        const response = {\r\n            fen: testFen,\r\n            firstMove\r\n        } as TProblem;\r\n        self.postMessage(JSON.stringify(response));\r\n        console.timeEnd()\r\n    }\r\n    else {\r\n        getPosition([...findProblem.pieces], 0);\r\n    }\r\n};\r\n\r\nexport { };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [777], function() { return __webpack_require__(481); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"0e9f84b3\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/chess-problem/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t481: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkchess_game\"] = self[\"webpackChunkchess_game\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(777).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["Chess","require","Board","regexCheck","RegExp","regexCheckmate","rows","cols","position","self","onmessage","e","findProblem","JSON","parse","data","pieces","fromSquare","nSquares","testFen","chessPosition","clear","nPatterns","applyQueenNightFirewall","includes","ind","j","length","indexOf","ind2","board","i","push","apply","_toConsumableArray","slice","twoEmptyLines","a","map","square","charAt","sort","b","columns","twoEmptyLinesWhitesBlacks","whitePieces","blackPieces","whiteMaxI","Math","max","parseInt","blackMinI","min","abs","whiteMaxJ","blackMinJ","diagonal1","diagonal2","diagonal","_i3","_arr","row","_loop","_arr2","_i4","_step","_iterator","_createForOfIteratorHelper","s","n","done","_diagonal$square","line","value","filter","x","err","f","_step2","_iterator2","_diagonal$square2","isPattern","squareQ","squareN","_ref","type","color","jQ","iQ","jN","iN","bRet","square2","checkmateIn2","_step3","whiteMoves1","moves","m","test","nMates1","firstMove","oneOfTheCheckmatesIsPattern","_iterator3","white1","move","blackMoves","nMates2","_step4","_iterator4","black","whiteMates","_step5","_iterator5","white2","console","log","undo","blackKingIndex","lastCheckmate","time","response","fen","postMessage","stringify","timeEnd","getPosition","index","_step6","c","shift","toLowerCase","blackKing","_iterator6","piecePlaced","put","isCheck","isAttacked","endsWith","startsWith","remove","whiteEmptyLines","blackEmptyLines","whiteHasCheck","pop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","next","then"],"sourceRoot":""}