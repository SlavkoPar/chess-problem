{"version":3,"file":"static/js/481.4fd30832.chunk.js","mappings":"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","sources":["Thread.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["\r\n/* eslint-disable no-restricted-globals */\r\nimport { FindProblem, TProblem } from \"./App\";\r\nimport { actions } from \"./enums\";\r\n\r\nconst { Chess } = require(\"chess.js\");\r\n\r\nconst Board = [\r\n    ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8'],\r\n    ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7'],\r\n    ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6'],\r\n    ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5'],\r\n    ['a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4'],\r\n    ['a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3'],\r\n    ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2'],\r\n    ['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1']\r\n]\r\n\r\nconst regexCheck = new RegExp('[#+]$');\r\nconst regexCheckmate = new RegExp('#$');\r\nconst rows: Record<string, string> = {\r\n    '1': '45678',\r\n    '2': '5678',\r\n    '3': '678',\r\n    '4': '78',\r\n    '5': '8'\r\n}\r\n\r\nconst cols: Record<string, string> = {\r\n    'a': 'defgh',\r\n    'b': 'efgh',\r\n    'c': 'fgh',\r\n    'd': 'gh',\r\n    'e': 'h'\r\n}\r\n\r\nconst position: string[] = [];\r\n\r\nself.onmessage = (e: MessageEvent<string>) => {\r\n    const findProblem = JSON.parse(e.data) as FindProblem;\r\n    const { fromSquare, nSquares, testFen } = findProblem;\r\n\r\n    const chessPosition = testFen ? new Chess(testFen) : new Chess();\r\n    if (!testFen)\r\n        chessPosition.clear();\r\n\r\n    let ind = 0;\r\n    let j = 0;\r\n    //const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n    for (; j < Board.length; j++) {\r\n        ind = Board[j].indexOf(fromSquare);\r\n        if (ind !== -1) {\r\n            break;\r\n        }\r\n    }\r\n    const ind2 = ind + nSquares;\r\n    const board: string[] = [];\r\n    for (let i = 0; i < nSquares - j; i++) {\r\n        board.push(...Board[j + i].slice(ind, ind2));\r\n    }\r\n\r\n    const checkmateIn2WAS = (): string | null => {\r\n        const whiteMoves1 = chessPosition.moves().filter((m: string) => !regexCheck.test(m) && !m.includes('x'));\r\n        let nMates1 = 0;\r\n        let firstMove: string | null = null;\r\n        for (const white1 of whiteMoves1) {\r\n            // white1 \r\n            chessPosition.move(white1);\r\n            // black 1\r\n            const blackMoves = chessPosition.moves();\r\n            let nMates2 = 0;\r\n            for (const black of blackMoves) {\r\n                chessPosition.move(black);\r\n                // white 2\r\n                const white2Moves = chessPosition.moves();\r\n                nMates2 = white2Moves.filter((m: string) => regexCheckmate.test(m)).length;\r\n                chessPosition.undo();\r\n                if (nMates2 !== 1)\r\n                    break; // second move is not checkmate or there are more than 1 checkmate\r\n            }\r\n            if (nMates2 === 1) {\r\n                console.log('checkmate at second move', white1)\r\n                nMates1++;\r\n                firstMove = white1;\r\n            }\r\n            chessPosition.undo();\r\n            if (nMates1 > 1) // there are more than 1 first move that is a checkmate\r\n                break;\r\n        }\r\n        return nMates1 === 1 ? firstMove : null;\r\n    }\r\n\r\n    // inside of white or black pieces\r\n    const twoEmptyLines = (pieces: string[]): boolean => { // ['b1', 'd4', 'e4', 'h5']\r\n        const a = pieces.map(square => square.charAt(1)).sort();\r\n        for (let i = 0; i < a.length - 1; i++) {\r\n            if (!['6', '7', '8'].includes(a[i])) {\r\n                if (rows[a[i]].includes(a[i + 1]))\r\n                    return true;\r\n            }\r\n        }\r\n        const b = pieces.map(square => square.charAt(0)).sort();\r\n        for (let i = 0; i < b.length - 1; i++) {\r\n            if (!['f', 'g', 'h'].includes(b[i])) {\r\n                if (cols[b[i]].includes(b[i + 1]))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const columns = \"abcdefgh\";\r\n\r\n    // between white pieces and black king\r\n    const twoEmptyLinesWhitesBlacks = (whitePieces: string[], blackPieces: string[]): boolean => {\r\n        const whiteMaxI = Math.max(...whitePieces.map(square => parseInt(square.charAt(1))));\r\n        const blackMinI = Math.min(...blackPieces.map(square => parseInt(square.charAt(1))));\r\n        if (Math.abs(whiteMaxI - blackMinI) > 1)\r\n            return true;\r\n        const whiteMaxJ = Math.max(...whitePieces.map(square => columns.indexOf(square.charAt(0))));\r\n        const blackMinJ = Math.min(...blackPieces.map(square => columns.indexOf(square.charAt(0))));\r\n        if (Math.abs(whiteMaxJ - blackMinJ) > 1)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    const checkmateIn2 = (): string | null => {\r\n        const whiteMoves1 = chessPosition.moves().filter((m: string) => !regexCheck.test(m) && !m.includes('x'));\r\n        let nMates1 = 0;\r\n        let firstMove: string | null = null;\r\n        for (const white1 of whiteMoves1) {\r\n            // white1 \r\n            chessPosition.move(white1);\r\n            // black 1\r\n            const blackMoves = chessPosition.moves();\r\n            let nMates2 = 0;\r\n            for (const black of blackMoves) {\r\n                chessPosition.move(black);\r\n                // white 2\r\n                const white2Moves = chessPosition.moves();\r\n                nMates2 = white2Moves.filter((m: string) => regexCheckmate.test(m)).length;\r\n                chessPosition.undo();\r\n                if (nMates2 === 0)\r\n                    break; // second move is not checkmate or there are more than 1 checkmate\r\n            }\r\n            if (nMates2 > 0) {\r\n                if (testFen)\r\n                    console.log('checkmate at second move', white1)\r\n                nMates1++;\r\n                firstMove = white1;\r\n            }\r\n            chessPosition.undo();\r\n            // if (nMates1 > 1) // there are more than 1 first move that is a checkmate\r\n            //    break;\r\n        }\r\n        if (testFen)\r\n            console.log(nMates1 === 1 ? 'Position is problem' : 'Position is not problem')\r\n        return nMates1 === 1 ? firstMove : null;\r\n    }\r\n\r\n    const blackKingIndex = findProblem.pieces.indexOf('k');\r\n    let lastCheckmate: string | null = null;\r\n\r\n    function getPosition(pieces: string[], index: number): void {\r\n        const piece = pieces.shift();\r\n        const c = piece!.charAt(0);\r\n        const type = c.toLowerCase();\r\n        const color = /[RNBKQP]/.test(c) ? 'w' : 'b';\r\n        const blackKing = c === 'k';\r\n        // console.log(piece)\r\n        for (const square of board) {\r\n            if (!position.includes(square) && !((type === 'p' && (square.includes('8') || square.includes('1'))))) {\r\n                const piecePlaced = chessPosition.put({ type, color }, square);\r\n                const invalidPos = chessPosition.isCheck() ||\r\n                    (blackKing && chessPosition.isAttacked(square, 'w')) ||\r\n                    (color === 'b' && chessPosition.isAttacked(position[0], 'b')); // white 'K' is at position[0]\r\n                if (invalidPos) {\r\n                    const z = chessPosition.remove(square);\r\n                }\r\n                else {\r\n                    if (piecePlaced) {\r\n                        let whiteEmptyLines = false;\r\n                        let blackEmptyLines = false;\r\n                        let whiteHasCheck = false;\r\n                        if (blackKing) {\r\n                            lastCheckmate = null;\r\n                        }\r\n                        position.push(square);\r\n                        //if (color === 'w' && position.length > 1) {\r\n                        if (index > 0 && index < blackKingIndex) {\r\n                            const whitePieces = position.slice(0, position.length); // TODO keep blackPieces at recursion level\r\n                            whiteEmptyLines = twoEmptyLines(whitePieces);\r\n                        }\r\n                        else if (index >= blackKingIndex) {\r\n                            const blackPieces = position.slice(blackKingIndex, position.length); // TODO keep blackPieces at recursion level\r\n                            if (blackPieces.length > 1) {\r\n                                blackEmptyLines = twoEmptyLines(blackPieces);\r\n                            }\r\n                            if (!blackEmptyLines) {\r\n                                const whitePieces = position.slice(0, blackKingIndex);\r\n                                blackEmptyLines = twoEmptyLinesWhitesBlacks(whitePieces, blackPieces);\r\n                            }\r\n                            if (index === blackKingIndex) {\r\n                                // ignore if white has no check at the first move\r\n                                whiteHasCheck = chessPosition.isAttacked(square, 'w')\r\n                            }\r\n                        }\r\n                        if (!whiteEmptyLines && !blackEmptyLines && !whiteHasCheck) {\r\n                            if (pieces.length === 0) {\r\n                                const fen = chessPosition.fen()\r\n                                let firstMove = checkmateIn2();\r\n                                const isCheckmate = firstMove !== null;\r\n                                if (isCheckmate) {\r\n                                    if (firstMove === lastCheckmate) {\r\n                                        firstMove = null;\r\n                                    }\r\n                                    else {\r\n                                        lastCheckmate = firstMove;\r\n                                        console.log('------', position, '---', fen);\r\n                                    }\r\n                                }\r\n                                const response = { fen, firstMove } as TProblem;\r\n                                self.postMessage(JSON.stringify(response));\r\n                                //if (isCheckmate) {\r\n                                // if white move (Qf7) is checkmate, \r\n                                // then ignore every problem, after all black pieces moves (except king), \r\n                                // that produces checkmate (Qf7)\r\n                                //}\r\n                            }\r\n                            else {\r\n                                getPosition([...pieces], index + 1);\r\n                            }\r\n                        }\r\n                        position.pop();\r\n                        const z = chessPosition.remove(square);\r\n                        // const fen2 = chessPosition.fen();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (fromSquare === \"\") {\r\n        console.log('Invalid fromSquare')\r\n    }\r\n    else if (testFen) {\r\n        console.time()\r\n        const firstMove = checkmateIn2();\r\n        const response = {\r\n            fen: testFen,\r\n            firstMove\r\n        } as TProblem;\r\n        self.postMessage(JSON.stringify(response));\r\n        console.timeEnd()\r\n    }\r\n    else {\r\n        getPosition([...findProblem.pieces], 0);\r\n    }\r\n};\r\n\r\nexport { };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [777], function() { return __webpack_require__(481); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"0e9f84b3\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/chess-problem/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t481: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkchess_game\"] = self[\"webpackChunkchess_game\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(777).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["Chess","require","Board","regexCheck","RegExp","regexCheckmate","rows","cols","position","self","onmessage","e","findProblem","JSON","parse","data","fromSquare","nSquares","testFen","chessPosition","clear","ind","j","length","indexOf","ind2","board","i","push","apply","_toConsumableArray","slice","twoEmptyLines","pieces","a","map","square","charAt","sort","includes","b","columns","twoEmptyLinesWhitesBlacks","whitePieces","blackPieces","whiteMaxI","Math","max","parseInt","blackMinI","min","abs","whiteMaxJ","blackMinJ","checkmateIn2","_step3","whiteMoves1","moves","filter","m","test","nMates1","firstMove","_iterator3","_createForOfIteratorHelper","s","n","done","white1","value","move","_step4","blackMoves","nMates2","_iterator4","black","undo","err","f","console","log","blackKingIndex","lastCheckmate","time","response","fen","postMessage","stringify","timeEnd","getPosition","index","_step5","c","shift","type","toLowerCase","color","blackKing","_iterator5","piecePlaced","put","isCheck","isAttacked","remove","whiteEmptyLines","blackEmptyLines","whiteHasCheck","pop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","x","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","next","then"],"sourceRoot":""}